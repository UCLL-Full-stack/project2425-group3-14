import Head from "next/head.js";
import Header from "../../components/header";
import { useRouter } from "next/router";
import React, { useState } from "react";
import UserService from "../../services/UserService.ts";
import { StatusMessage } from "@types";
import classNames from "classnames";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";


const Login: React.FC = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const { t } = useTranslation(); 
  

  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  const [statusMessages, setStatusMessages] = useState<StatusMessage[]>([]);
  const router = useRouter();

  const validate = (): boolean => {
    let isValid = true;

    if (!username.trim()) {
      setError("Username and/or Password is incorrect");
      isValid = false;
    }

    if (!password.trim()) {
      setError("Username and/or Password is incorrect");
      isValid = false;
    }

    return isValid;
  };

  const loginAsGuest = async () => {
    // event.preventDefault();
    const user = { username: "guest", password: "guest123"}
    setError("");
    setSuccessMessage("");
    
    try {
      const response = await UserService.loginUser(user);

      if (response.ok) {
        setSuccessMessage("Login successful!");
        setStatusMessages([{ message: "Login successful", type: "success" }]);
        
        const user = await response.json();
        console.log("User API response:", user); 

        const userData = {
          token: user.token,
          username: user.username,
          userId: user.userId,
          email: user.email,
          role: user.role,
          cartId: user.cartId,
        };
        
        console.log("User data before storing:", userData); 
        console.log("Users Id is:", user.id);
        sessionStorage.setItem("loggedInUser", JSON.stringify(userData));
        console.log("SessionStorage after storing:", sessionStorage.getItem("loggedInUser")); // Debug log
        
        localStorage.setItem("loggedInUser", username);
        setTimeout(() => {
          router.push("/");
        }, 800);
      } else {
        const userr = { username: "guest", email: "guest@guest.com", password: "guest123", role: "guest"}
        const response = await UserService.createUser(userr);
        const message = await response.json();
        console.log(message || "Guest configured message!");
        loginAsGuest();
      }
    } catch (err) {
      console.error("Error during login:", err); 
      setError(err instanceof Error ? err.message : "An unknown error occurred");
      setStatusMessages([{ message: "Login failed", type: "error" }]);
    }
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    setError("");
    setSuccessMessage("");

    if (!validate()) {
      return;
    }

    const user = { username, password };

    try {
      const response = await UserService.loginUser(user);

      if (response.ok) {
        setSuccessMessage("Login successful!");
        setStatusMessages([{ message: "Login successful", type: "success" }]);

        const user = await response.json();
        console.log("User API response:", user); 

        const userData = {
          token: user.token,
          username: user.username,
          userId: user.userId,
          email: user.email,
          role: user.role,
          cartId: user.cartId,
        };

        console.log("User data before storing:", userData); 
        console.log("Users Id is:", user.id);
        sessionStorage.setItem("loggedInUser", JSON.stringify(userData));
        console.log("SessionStorage after storing:", sessionStorage.getItem("loggedInUser")); // Debug log

        localStorage.setItem("loggedInUser", username);
        setTimeout(() => {
          router.push("/");
        }, 800);
      } else {
        const errorData = await response.json();
        console.error("Login error response:", errorData); 
        throw new Error(errorData.error || "Login failed");
      }
    } catch (err) {
      console.error("Error during login:", err); 
      setError(err instanceof Error ? err.message : "An unknown error occurred");
      setStatusMessages([{ message: "Login failed", type: "error" }]);
    }
  };

  return (
    <>
      <Head>
        <title>BookMarkt</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Header />
        <main className="p-1 flex-grow flex justify-center items-center">
          <section>
            <h2>{t('login.title')}</h2>
            <form className="form" onSubmit={handleSubmit}>
              <label htmlFor="username">{t('login.username')}</label>
              <input
                type="text"
                id="username"
                name="username"
                value={username}
                onChange={(event) => setUsername(event.target.value)}
                required
              />

              <label htmlFor="password">{t('login.password')}</label>
              <input
                type="password"
                id="password"
                name="password"
                value={password}
                onChange={(event) => setPassword(event.target.value)}
                required
              />

              <button type="submit" className="form-button">
              {t('login.title')}
              </button>
            </form>
            {error && <p style={{ color: "red" }}>{error}</p>}
            {successMessage && <p style={{ color: "green" }}>{successMessage}</p>}
            <p>
            {t('login.create-account')} <a href="/register">{t('login.register')}</a>
            </p>
            <p>{t('login.or')}</p>
              <button onClick={() => loginAsGuest()} className="guest-button">
              {t('login.guest')}
            </button>

            <table>
              <thead>
                <tr>
                <th>Name</th>
                <th>Password</th>
                <th>Role</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>admin</td>
                  <td>admin123</td>
                  <td>admin</td>
                </tr>
                <tr>
                  <td>maria</td>
                  <td>maria123</td>
                  <td>customer</td>
                </tr>
                <tr>
                  <td>guest</td>
                  <td>guest123</td>
                  <td>guest</td>
                </tr>
              </tbody>
            </table>
          </section>
        </main>
      </div>
    </>
  );
};

export const getServerSideProps = async (context) => {
  const { locale } = context;
  return {
      props: {
          ...(await serverSideTranslations(locale ?? "en", ["common"])),
      },
  };
};

export default Login;
